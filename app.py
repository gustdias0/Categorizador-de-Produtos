import streamlit as st
import pandas as pd
import re

REGRAS_DE_CATEGORIZACAO = {
    "Padaria e Frios > Padaria > P√£es": ["p√£o de forma", "p√£o integral", "p√£o franc√™s", "p√£o de queijo"],
    "Mercearia > Matinais e Doces > Leite Condensado e Cremes": ["leite condensado", "creme de leite"],
    "Higiene e Beleza > Cuidados com o Cabelo > Colora√ß√£o": ["tinta para cabelo", "koleston"],
    "Limpeza > Roupas > Sab√£o L√≠quido": ["lava roupas liquido", "ariel"],
    "Mercearia > Secos > Sal e Temperos": ["sal refinado", "cisne"],
    "Mercearia > L√≠quidos e Conservas > Molhos": ["ketchup", "hemmer", "molho de tomate", "heinz"],
    "Higiene e Beleza > Higiene Pessoal > Higiene Feminina": ["absorvente", "intimus"],
    "Automotivo > Pneus e Rodas > Pneus": ["pneu", "pirelli"],
    "Bebidas > N√£o Alco√≥licas > Refrigerantes": ["refrigerante", "guaran√° antarctica", "coca-cola", "pepsi", "fanta", "refri."],
    "Bebidas > N√£o Alco√≥licas > Sucos": ["suco em p√≥", "tang", "suco", "delvalle", "n√©ctar"],

    # --- HIGIENE E BELEZA ---
    "Higiene e Beleza > Cuidados com o Cabelo > Shampoos": ["shampoo", "head & shoulders", "johnson's baby"],
    "Higiene e Beleza > Cuidados com o Cabelo > Condicionadores": ["condicionador", "condicionador dove"],
    "Higiene e Beleza > Higiene Pessoal > Higiene Bucal": ["creme dental", "colgate", "oral-b", "dente"],
    "Higiene e Beleza > Higiene Pessoal > Sabonetes": ["sabonete", "sabonete liquido", "protex", "dove"],
    "Higiene e Beleza > Higiene Pessoal > Desodorantes": ["desodorante", "rexona"],
    "Higiene e Beleza > Higiene Pessoal > Outros": ["cotonetes", "papel higi√™nico", "neve"],
    "Higiene e Beleza > Perfumaria > Barbear": ["creme para barbear", "bozzano"],
    "Higiene e Beleza > Perfumaria > Maquiagem": ["esmalte", "risqu√©", "base liquida", "vult"],

    # --- LIMPEZA ---
    "Limpeza > Roupas > Sab√£o em P√≥": ["sab√£o em p√≥", "sabao em po", "omo"],
    "Limpeza > Roupas > Amaciantes": ["amaciante", "comfort", "downy"],
    "Limpeza > Roupas > Alvejantes": ["√°gua sanit√°ria", "agua sanitaria", "qboa", "alvejante"],
    "Limpeza > Casa > Limpadores": ["limp.", "multiuso", "yp√™", "ype", "veja", "limpador"],
    "Limpeza > Casa > Esponjas de A√ßo": ["esponja de a√ßo", "bombril"],
    "Limpeza > Casa > Inseticidas": ["inseticida", "sbp"],
    "Limpeza > Descart√°veis > Sacos de Lixo": ["saco de lixo", "embalixo"],
    "Limpeza > Descart√°veis > Panos": ["pano de ch√£o"],

    # --- BEBIDAS (REGRAS MAIS GEN√âRICAS) ---
    "Bebidas > N√£o Alco√≥licas > √Åguas": ["agua mineral", "√°gua mineral", "√°gua de coco"],
    "Bebidas > N√£o Alco√≥licas > Ch√°s": ["ch√°", "cha", "le√£o fuze"],
    "Bebidas > N√£o Alco√≥licas > Isot√¥nicos": ["isot√¥nico", "gatorade"],
    "Bebidas > Alco√≥licas > Vinhos": ["vinho", "aurora", "casillero del diablo", "chalise"],
    "Bebidas > Alco√≥licas > Cervejas": ["cerveja", "heineken", "brahma"],
    "Bebidas > Alco√≥licas > Destilados": ["vodka", "absolut", "destilado"],
    
    # --- PADARIA E FRIOS (REGRAS MAIS GEN√âRICAS) ---
    "Padaria e Frios > Padaria > P√£es": ["p√£o", "pao"],
    "Padaria e Frios > Frios e Latic√≠nios > Queijos": ["queijo", "mussarela", "requeij√£o", "vigor"],
    "Padaria e Frios > Frios e Latic√≠nios > Frios Diversos": ["presunto", "peito de peru", "salame"],
    "Padaria e Frios > Frios e Latic√≠nios > Iogurtes": ["danone", "iogurte"],
    "Padaria e Frios > Frios e Latic√≠nios > Leite e Derivados": ["leite"],
    "Padaria e Frios > Frios e Latic√≠nios > Manteigas e Margarinas": ["manteiga", "avia√ß√£o", "margarina", "qualy"],
    
    # --- HORTIFRUTI ---
    "Hortifruti > Frutas": ["ma√ß√£", "maca", "fuji", "banana", "laranja", "uva", "mam√£o", "lim√£o"],
    "Hortifruti > Verduras e Legumes": ["alface", "tomate", "batata", "cebola", "cenoura"],
    
    # --- MERCEARIA (REGRAS MAIS GEN√âRICAS) ---
    "Mercearia > Secos > Caf√©": ["caf√©", "3 cora√ß√µes", "pil√£o", "melitta"],
    "Mercearia > Secos > Arroz, Feij√£o e Gr√£os": ["arroz", "feij√£o", "gr√£os", "lentilha"],
    "Mercearia > Secos > Farin√°ceos": ["farinha de trigo", "dona benta", "farinha de mandioca"],
    "Mercearia > Secos > A√ß√∫cares e Ado√ßantes": ["a√ß√∫car", "acucar", "ado√ßante", "zero-cal"],
    "Mercearia > L√≠quidos e Conservas > Enlatados": ["milho em lata", "enlatado", "ervilha", "seleta"],
    "Mercearia > Matinais e Doces > Biscoitos e Snacks": ["biscoito", "bolacha", "recheado", "snack", "trakinas", "negresco", "batata palha", "elma chips", "salgadinho"],
    "Mercearia > Matinais e Doces > Matinais": ["achocolatado", "nescau", "cereal", "sucrilhos"],
    "Mercearia > Matinais e Doces > Chocolates": ["chocolate", "lacta"],
    "Mercearia > Massas": ["macarr√£o", "espaguete", "penne", "massa", "renata"],
    
    # --- DEMAIS DEPARTAMENTOS ---
    "Congelados > Pratos Prontos": ["lasanha", "pizza congelada"],
    "Congelados > Salgados e P√£es": ["p√£o de queijo congelado", "forno de minas"],
    "Congelados > Sorvetes": ["sorvete", "kibon"],
    "Utilidades Dom√©sticas > Cozinha > Descart√°veis e Filtros": ["papel toalha", "filtro de caf√©", "papel alum√≠nio", "wyda"],
    "Utilidades Dom√©sticas > Outros > Pilhas e L√¢mpadas": ["pilha", "duracell", "l√¢mpada", "lampada", "ourolux"],
    "Utilidades Dom√©sticas > Outros > F√≥sforos e Velas": ["f√≥sforo", "fosforo", "vela de anivers√°rio"],
    "Utilidades Dom√©sticas > Churrasco": ["carv√£o", "carvao", "acendedor"],
    "Pet Shop > Alimentos > Ra√ß√µes": ["ra√ß√£o", "pedigree", "whiskas", "golden"],
    "Pet Shop > Alimentos > Petiscos": ["petisco", "dreamies"],
    "Pet Shop > Higiene > Tapetes e Outros": ["tapete higi√™nico"],
    "Mundo Beb√™ > Higiene > Fraldas": ["fralda", "pampers", "huggies"],
    "Mundo Beb√™ > Higiene > Len√ßos Umedecidos": ["len√ßos umedecidos", "m√¥nica"],
    "Mundo Beb√™ > Alimenta√ß√£o > F√≥rmulas e Leites": ["leite em p√≥ ninho"],
    "Mundo Beb√™ > Alimenta√ß√£o > Papinhas": ["papinha nestl√©"]
}

def carregar_csv(arquivo_enviado):
    arquivo_enviado.seek(0)
    linhas = [line.decode('utf-8', errors='ignore') for line in arquivo_enviado.readlines()]
    if not linhas: raise ValueError("O arquivo CSV enviado est√° vazio.")
    if linhas[0].startswith('\ufeff'): linhas[0] = linhas[0][1:]
    
    cabecalho = [h.strip() for h in linhas[0].split(',')]
    num_colunas_esperado = len(cabecalho)
    dados_corrigidos = []
    
    for num_linha, linha in enumerate(linhas[1:], 2):
        if not linha.strip(): continue
        campos = linha.strip().split(',')
        if len(campos) >= num_colunas_esperado:
            dados_corrigidos.append(campos[:num_colunas_esperado])
        else:
            print(f"AVISO: Linha {num_linha} ignorada (n√∫mero de colunas insuficiente).")
            
    df = pd.DataFrame(dados_corrigidos, columns=cabecalho)
    return df

def processar_dados(df: pd.DataFrame):
    colunas_necessarias = ['ID_Produto', 'Nome_Produto', 'Descricao']
    for col in colunas_necessarias:
        if col not in df.columns:
            raise ValueError(f"Erro Cr√≠tico: A coluna '{col}' n√£o foi encontrada. Verifique o cabe√ßalho do seu CSV.")

    df['Nome_Produto_Limpo'] = df['Nome_Produto'].str.replace(r'<[^<>]*>', '', regex=True).fillna('')
    df['Descricao_Limpa'] = df['Descricao'].str.replace(r'<[^<>]*>', '', regex=True).fillna('')
    df['texto_combinado_para_busca'] = (df['Nome_Produto_Limpo'].astype(str) + ' ' + df['Descricao_Limpa'].astype(str)).str.lower()
    
    df['temp_cat_n1'], df['temp_cat_n2'], df['temp_cat_n3'] = 'N√ÉO CATEGORIZADO', '', ''

    for categoria_completa, palavras_chave in REGRAS_DE_CATEGORIZACAO.items():
        niveis = categoria_completa.split(' > ')
        if len(niveis) < 3: continue 

        padrao_regex = '|'.join([re.escape(k) for k in palavras_chave])
        mask_uncategorized = df['temp_cat_n1'] == 'N√ÉO CATEGORIZADO'
        mask_keywords = df['texto_combinado_para_busca'].str.contains(padrao_regex, na=False, regex=True)
        rows_to_update = mask_uncategorized & mask_keywords

        if rows_to_update.any():
            df.loc[rows_to_update, 'temp_cat_n1'] = niveis[0]
            df.loc[rows_to_update, 'temp_cat_n2'] = niveis[1]
            df.loc[rows_to_update, 'temp_cat_n3'] = niveis[2]
    
    mask_incomplete = (df['temp_cat_n1'] != 'N√ÉO CATEGORIZADO') & (df['temp_cat_n3'] == '')
    if mask_incomplete.any():
        df.loc[mask_incomplete, ['temp_cat_n1', 'temp_cat_n2', 'temp_cat_n3']] = ['N√ÉO CATEGORIZADO', '', '']

   
    df_resultado = pd.DataFrame({
        'ID_PRODUTO_SISTEMA': df['ID_Produto'],
        'NOME_PRODUTO': df['Nome_Produto'],
        'NOVA_CATEGORIA_N1': df['temp_cat_n1'],
        'NOVA_CATEGORIA_N2': df['temp_cat_n2'],
        'NOVA_CATEGORIA_N3': df['temp_cat_n3'] 
    })
    return df_resultado

# --- Interface Streamlit ---
st.set_page_config(page_title="Categorizador de Produtos ", page_icon="üíª", layout="wide")
st.title("üíª Categorizador de Produtos ")
st.markdown("A ferramenta definitiva para organizar seus produtos. Fa√ßa o upload do seu CSV e deixe a m√°gica acontecer.")

uploaded_file = st.file_uploader("1. Escolha seu arquivo CSV", type="csv")

if uploaded_file is not None:
    try:
        df_bruto = carregar_csv(uploaded_file)
        st.subheader("2. Pr√©via dos Dados Carregados")
        st.dataframe(df_bruto.head())

        st.subheader("3. Processamento e Resultados")
        with st.spinner('Aplicando intelig√™ncia em cada produto...'):
            df_resultado = processar_dados(df_bruto)
        
        st.success("Processamento Conclu√≠do!")

        colunas_para_exibir = ['ID_PRODUTO_SISTEMA', 'NOME_PRODUTO', 'NOVA_CATEGORIA_N1', 'NOVA_CATEGORIA_N2', 'NOVA_CATEGORIA_N3']
        df_categorizados = df_resultado[df_resultado['NOVA_CATEGORIA_N1'] != 'N√ÉO CATEGORIZADO'][colunas_para_exibir]
        df_nao_categorizados = df_resultado[df_resultado['NOVA_CATEGORIA_N1'] == 'N√ÉO CATEGORIZADO'][['ID_PRODUTO_SISTEMA', 'NOME_PRODUTO']]

        st.markdown("### ‚úÖ Produtos Categorizados com Sucesso")
        st.dataframe(df_categorizados)

        if not df_nao_categorizados.empty:
            st.warning("‚ö†Ô∏è Aten√ß√£o: Alguns produtos n√£o foram categorizados pelas regras atuais!")
            st.dataframe(df_nao_categorizados)
        else:
            st.balloons()
            st.success("üéâ Fant√°stico! Todos os produtos foram categorizados com sucesso!")

        st.subheader("4. Download do Arquivo Final")
        df_para_download = df_resultado[['ID_PRODUTO_SISTEMA', 'NOVA_CATEGORIA_N1', 'NOVA_CATEGORIA_N2', 'NOVA_CATEGORIA_N3']]
        csv_resultado = df_para_download.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üì• Fazer Download do Resultado para Importa√ß√£o",
            data=csv_resultado,
            file_name='produtos_prontos_para_importacao.csv',
            mime='text/csv',
        )

    except Exception as e:
        st.error("Ocorreu um erro cr√≠tico durante o processamento.")
        st.exception(e)